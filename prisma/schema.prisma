// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  //provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AccountMovement {
  id               Int      @id @default(autoincrement())
  dateMovement     DateTime @db.Timestamp
  documentNumber   String?
  valueMovement    Float
  finished         Boolean
  observations     String   @db.Text
  bankAccountId    Int
  movementCodeId   Int
  entityId         Int
  accountId        Int?

  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  movementCode MovementCode @relation(fields: [movementCodeId], references: [id])
  entity Entity @relation(fields: [entityId], references: [id])
  
  @@index([dateMovement])
}

model AccountPlan {
  id          Int      @id @default(autoincrement())
  description String   @unique
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  accountSubPlans AccountSubPlan[]
}

model AccountSubPlan {
  id            Int      @id @default(autoincrement())
  description   String
  accountPlanId Int
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  accountPlan AccountPlan @relation(fields: [accountPlanId], references: [id])

  @@unique([accountPlanId, description])
}

model BankAccount {
  id                 Int      @id @default(autoincrement())
  name               String
  numberBank         Int?
  agency             String?
  agencyDigit        String?
  numberAccount      String?
  numberAccountDigit String?
  addressType        String?
  address            String?
  addressNumber      String?
  addressComplement  String?
  neighborhood       String?
  city               String?
  uf                 String?
  cep                String?
  phones             String?
  contactPerson      String?
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  accountMovements AccountMovement[]

  @@index([name])
}

model Entity {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  accountMovements AccountMovement[]
}

model MovementCode {
  id          Int      @id @default(autoincrement())
  description String
  nature      String
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  accountMovements AccountMovement[]
}

model Parameter {
  id              Int      @id @default(1)
  uppercaseFields Boolean
  dateLock        DateTime
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  @@unique([id])
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  password    String
  userGroupId Int
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  group UserGroup @relation(fields: [userGroupId], references: [id])
}

model UserGroup {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  isAdmin     Boolean
  createdAt   DateTime @db.Timestamp @default(now())
  updatedAt   DateTime @db.Timestamp @updatedAt

  users User[]
}
