// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model AccountMovement {
  id             Int      @id @default(autoincrement())
  dateMovement   DateTime @db.Timestamp
  documentNumber String?
  valueMovement  Float
  finished       Boolean
  observations   String   @db.Text
  bankAccountId  Int
  movementCodeId Int
  createdAt      DateTime @default(now()) @db.Timestamp
  updatedAt      DateTime @updatedAt @db.Timestamp

  accountMovementSplits AccountMovementSplit[]
  bankAccount           BankAccount            @relation(fields: [bankAccountId], references: [id])
  movementCode          MovementCode           @relation(fields: [movementCodeId], references: [id])

  @@index([dateMovement])
}

model AccountMovementSplit {
  id                Int      @id @default(autoincrement())
  accountMovementId Int
  entityId          Int
  accountSubPlanId  Int
  valueSplit        Float
  createdAt         DateTime @default(now()) @db.Timestamp
  updatedAt         DateTime @updatedAt @db.Timestamp

  accountMovement AccountMovement @relation(fields: [accountMovementId], references: [id])
  entity          Entity          @relation(fields: [entityId], references: [id])
  accountSubPlan  AccountSubPlan  @relation(fields: [accountSubPlanId], references: [id])

  @@unique([accountMovementId, entityId, accountSubPlanId], name: "movementId_entityId_subPlanId")
}

model AccountPlan {
  id          Int      @id @default(autoincrement())
  description String   @unique
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp

  accountSubPlans AccountSubPlan[]
}

model AccountSubPlan {
  id            Int      @id @default(autoincrement())
  description   String
  accountPlanId Int
  createdAt     DateTime @default(now()) @db.Timestamp
  updatedAt     DateTime @updatedAt @db.Timestamp

  accountPlan AccountPlan @relation(fields: [accountPlanId], references: [id])

  accountMovementSplits AccountMovementSplit[]

  @@unique([accountPlanId, description])
}

model BankAccount {
  id                 Int      @id @default(autoincrement())
  name               String
  numberBank         Int?
  agency             String?
  agencyDigit        String?
  numberAccount      String?
  numberAccountDigit String?
  addressType        String?
  address            String?
  addressNumber      String?
  addressComplement  String?
  neighborhood       String?
  city               String?
  uf                 String?
  cep                String?
  phones             String?
  contactPerson      String?
  createdAt          DateTime @default(now()) @db.Timestamp
  updatedAt          DateTime @updatedAt @db.Timestamp

  accountMovements AccountMovement[]

  @@index([name])
}

model Entity {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  accountMovementsSplits AccountMovementSplit[]
}

model MovementCode {
  id          Int      @id @default(autoincrement())
  description String
  nature      String
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp

  accountMovements AccountMovement[]
}

model Parameter {
  id              Int      @id @default(1)
  uppercaseFields Boolean
  dateLock        DateTime
  createdAt       DateTime @default(now()) @db.Timestamp
  updatedAt       DateTime @updatedAt @db.Timestamp

  @@unique([id])
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  password    String
  userGroupId Int
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp

  userGroup UserGroup @relation(fields: [userGroupId], references: [id])
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isAdmin   Boolean
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  users User[]
}
